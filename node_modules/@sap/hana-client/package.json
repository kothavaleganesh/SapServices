{
  "_args": [
    [
      {
        "raw": "@sap/hana-client",
        "scope": "@sap",
        "escapedName": "@sap%2fhana-client",
        "name": "@sap/hana-client",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/home/bestseller/Documents/SAP-connection"
    ]
  ],
  "_from": "@sap/hana-client@latest",
  "_id": "@sap/hana-client@2.4.142",
  "_inCache": true,
  "_location": "/@sap/hana-client",
  "_nodeVersion": "8.10.0",
  "_npmUser": {
    "name": "https-support.sap.com",
    "email": "do.not.reply@sap.com"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "@sap/hana-client",
    "scope": "@sap",
    "escapedName": "@sap%2fhana-client",
    "name": "@sap/hana-client",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://npm.sap.com/@sap/hana-client/-/hana-client-2.4.142.tgz",
  "_shasum": "e0d0354c6b28534edeadcab0f013118892d789e0",
  "_shrinkwrap": {
    "version": "2.4.142",
    "name": "@sap/hana-client",
    "dependencies": {
      "debug": {
        "version": "3.1.0"
      },
      "ms": {
        "version": "2.0.0"
      }
    }
  },
  "_spec": "@sap/hana-client",
  "_where": "/home/bestseller/Documents/SAP-connection",
  "author": {
    "name": "SAP"
  },
  "bundleDependencies": false,
  "dependencies": {
    "debug": "3.1.0"
  },
  "deprecated": false,
  "description": "HANA JavaScript Driver.",
  "devDependencies": {},
  "dist": {
    "integrity": "sha512-o+Gn2rMuesRHkH1qwBECjDKT7CrEUKcbodq5W4sDPyamxh0p4lK5MaoQvIdEHkwJwkzGj7B5NQuSmc1+oA9kDg==",
    "shasum": "e0d0354c6b28534edeadcab0f013118892d789e0",
    "tarball": "https://npm.sap.com/@sap/hana-client/-/hana-client-2.4.142.tgz"
  },
  "engines": {
    "node": ">=4.0.0"
  },
  "license": "SEE LICENSE IN developer-license-3.1.txt",
  "main": "./lib/index",
  "maintainers": [
    {
      "name": "https-support.sap.com",
      "email": "do.not.reply@sap.com"
    }
  ],
  "name": "@sap/hana-client",
  "optionalDependencies": {},
  "readme": "#@sap/hana-client\nThis is a Node.js driver written for [SAP HANA](http://go.sap.com/product/technology-platform/hana.html).\n\n##Install\n```\nnpm install @sap/hana-client\n```\n####Prerequisites\n\nThis driver communicates with the native HANA libraries, and thus requires\nplatform-specific native binaries. Native compilation is managed by\n[`node-gyp`](https://github.com/TooTallNate/node-gyp/). Please see that project\nfor additional prerequisites including Python 2.7, and C/C++ tool chain.\n\nThe official hosted version includes precompiled libraries for Linux, Windows and Mac OS X.\n\nThe @sap/hana-client driver supports node.js 4.x, 6.x, 8.x and 10.x.\n\n##Getting Started\n```js\nvar hana = require('@sap/hana-client');\n\nvar conn = hana.createConnection();\n\nvar conn_params = {\n  serverNode  : 'myserver:30015',\n  uid         : 'system',\n  pwd         : 'manager'\n};\n\nconn.connect(conn_params, function(err) {\n  if (err) throw err;\n  conn.exec('SELECT Name, Description FROM Products WHERE id = ?', [301], function (err, result) {\n    if (err) throw err;\n\n    console.log('Name: ', result[0].Name, ', Description: ', result[0].Description);\n    // output --> Name: Tee Shirt, Description: V-neck\n    conn.disconnect();\n  })\n});\n```\n\n##Establish a database connection\n###Connecting\nA database connection object is created by calling `createConnection`.  The\nconnection is established by calling the connection object's `connect` method,\nand passing in an object representing connection parameters.\n\n#####Example: Connecting over TCP/IP\n```js\nconn.connect({\n  host    : 'myserver',\n  port    : '30015',\n  uid     : 'system',\n  pwd     : 'manager'\n});\n```\n\n###Disconnecting\n\n```js\nconn.disconnect(function(err) {\n  if (err) throw err;\n  console.log('Disconnected');\n});\n```\n##Direct Statement Execution\nDirect statement execution is the simplest way to execute SQL statements. The\ninputs are the SQL command to be executed, and an optional array of positional\narguments. The result is returned using callbacks. The type of returned result\ndepends on the kind of statement.\n\n####DDL Statement\n\nIn the case of a successful DDL Statement nothing is returned.\n\n```js\nconn.exec('CREATE TABLE Test (id INTEGER PRIMARY KEY, msg VARCHAR(128))', function (err, result) {\n  if (err) throw err;\n  console.log('Table Test created!');\n});\n```\n\n####DML Statement\n\nIn the case of a DML Statement the number of `affectedRows` is returned.\n\n```js\nconn.exec(\"INSERT INTO Test VALUES(1, 'Hello')\", function (err, affectedRows) {\n  if (err) throw err;\n  console.log('Number of affected rows:', affectedRows);\n});\n```\n\n####Query\n\nThe `exec` function is a convenient way to completely retrieve the result of a\nquery. In this case all selected rows are fetched and returned in the callback.\n\n```js\nconn.exec(\"SELECT * FROM Test WHERE id < 5\", function (err, rows) {\n  if (err) throw err;\n  console.log('Rows:', rows);\n});\n```\n\nValues in the query can be substitued with JavaScript variables by using `?`\nplaceholders in the query, and passing an array of positional arguments.\n\n```js\nconn.exec(\"SELECT * FROM Test WHERE id BETWEEN ? AND ?\", [5, 8], function (err, rows) {\n  if (err) throw err;\n  console.log('Rows:', rows);\n});\n```\n\n##Prepared Statement Execution\n####Prepare a Statement\nThe connection returns a `statement` object which can be executed multiple times.\n```js\nconn.prepare('SELECT * FROM Test WHERE id = ?', function (err, stmt){\n  if (err) throw err;\n  // do something with the statement\n});\n```\n\n####Execute a Statement\nThe execution of a prepared statement is similar to the direct statement execution.\nThe first parameter of `exec` function is an array with positional parameters.\n```js\nstmt.exec([16], function(err, rows) {\n  if (err) throw err;\n  console.log(\"Rows: \", rows);\n});\n```\n\n####Execute a Batch Statement\nThe execution of a prepared batch statement is similar to the direct statement execution.\nThe first parameter of `execBatch` function is an array with positional parameters.\n```js\nvar stmt=conn.prepare(\"INSERT INTO Customers(ID, NAME) VALUES(?, ?)\");\nstmt.execBatch([[1, 'Company 1'], [2, 'Company 2']], function(err, rows) {\n  if (err) throw err;\n  console.log(\"Rows: \", rows);\n});\n```\n\n####Execute a Query\nThe execution of a prepared query is similar to the direct statement execution.\nThe first parameter of `execQuery` function is an array with positional parameters.\n```js\nvar stmt=conn.prepare(\"SELECT * FROM Customers WHERE ID >= ? AND ID < ?\");\nstmt.execQuery([100, 200], function(err, rs) {\n  if (err) throw err;\n    var rows = [];\n    while (rs.next()) {\n\trows.push(rs.getValues());\n    }\n  console.log(\"Rows: \", rows);\n});\n```\n\n####Drop Statement\n```js\nstmt.drop(function(err) {\n  if (err) throw err;\n});\n```\n\n##Transaction Handling\n__Transactions are automatically commited.__ Setting autocommit to false implicitly\nstarts a new transaction that must be explicitly committed, or rolled back.\n\n####Commit a Transaction\n\n```js\nconn.setAutoCommit(false);\n// Execute some statements\nconn.commit(function(err) {\n  if (err) throw err;\n  console.log('Transaction commited.');\n});\n```\n\n####Rollback a Transaction\n```js\nconn.setAutoCommit(false);\n// Execute some statements\nconn.rollback(function(err) {\n  if (err) throw err;\n  console.log('Transaction rolled back.');\n});\n```\n\n##Resources\n+ [SAP HANA Documentation](http://help.sap.com/hana)\n+ [SAP HANA Forum](http://saphanatutorial.com/forum/)\n+ [SAP HANA Community](https://go.sap.com/community/topic/hana.html)\n",
  "readmeFilename": "README.md",
  "scripts": {
    "install": "node build.js"
  },
  "version": "2.4.142"
}
