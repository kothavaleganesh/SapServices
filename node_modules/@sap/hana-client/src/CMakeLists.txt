INCLUDE(buildtools/Preprocessing)

IF(CLIENT_BUILD_NODE)

IF(DARWIN)
    IF(CPP_ABI STREQUAL "xcode7")
         STRING_APPEND(CMAKE_CXX_FLAGS "-std=c++11 -stdlib=libc++")
#        STRING_APPEND(CMAKE_CXX_FLAGS "-std=c++11")
    ELSE() # presume newer
        STRING_APPEND(CMAKE_CXX_FLAGS "-std=c++11")
    ENDIF()
    STRING_APPEND(CMAKE_SHARED_LINKER_FLAGS "-Wl,-undefined,dynamic_lookup")
ELSEIF(LINUX)
    STRING_APPEND(CMAKE_CXX_FLAGS "-std=c++11")
# ELSEIF(WINDOWS)
    # STRING_APPEND(CMAKE_SHARED_LINKER_FLAGS "-FORCE")
ENDIF()


# ------- Node shim DLL generation ----------
# MESSAGE(STATUS "INTERFACES_SRC_PATH=${INTERFACES_SRC_PATH}")
# MESSAGE(STATUS "CMAKE_SOURCE_DIR=${CMAKE_SOURCE_DIR}")

SET(hananode_sources
    hana.cpp
    utils.cpp
    connection.cpp
    resultset.cpp
    statement.cpp
    ${CMAKE_SOURCE_DIR}/Interfaces/dbcapi/DBCAPI_DLL.cpp
)
IF(WINDOWS)
    LIST(APPEND hananode_sources "${CMAKE_SOURCE_DIR}/include/node/win_delay_load_hook.cc" )
ENDIF()

# ----------------------------------- Node 4 -----------------------------------
SET(tgt_node4 "hana-client_v4")
ADD_HDB_LIBRARY(${tgt_node4}
                SHARED
                NO_LIB_PREFIX
                ALLOW_UNDEFINED_SYMBOLS_AT_LINK_TIME
                ${hananode_sources})

TARGET_COMPILE_DEFINITIONS(${tgt_node4} PRIVATE
    "_DBCAPI_VERSION=2"
    "DRIVER_NAME=hana"
)

TARGET_INCLUDE_DIRECTORIES( ${tgt_node4} PUBLIC ${NODE4_INCLUDE})
TARGET_INCLUDE_DIRECTORIES( ${tgt_node4} PUBLIC ${CMAKE_SOURCE_DIR}/Interfaces/dbcapi)
TARGET_INCLUDE_DIRECTORIES( ${tgt_node4} PUBLIC "h")

IF(WINDOWS)
    ADD_EXTERNAL_LIBRARY( node4_implib
        LIBS "${node4implib_file}"
        PATHS "${node4implib_path}"
        DONT_COPY_TO_GEN_DIR
    )
    TARGET_LINK_LIBRARIES(${tgt_node4}
        PUBLIC
        node4_implib
    )
ENDIF()
IF(LINUX)
    SET_PROPERTY(TARGET ${tgt_node4} APPEND PROPERTY LINK_FLAGS "-Wl,-Bsymbolic")
ENDIF()
SET_TARGET_PROPERTIES(${tgt_node4} PROPERTIES SUFFIX ".node")

# --------------------------------- End Node 4 ---------------------------------

# ----------------------------------- Node 6 -----------------------------------
SET(tgt_node6 "hana-client")
ADD_HDB_LIBRARY(${tgt_node6}
                SHARED
                NO_LIB_PREFIX
                ALLOW_UNDEFINED_SYMBOLS_AT_LINK_TIME
                ${hananode_sources})

TARGET_COMPILE_DEFINITIONS(${tgt_node6} PRIVATE
    "_DBCAPI_VERSION=2"
    "DRIVER_NAME=hana"
)

TARGET_INCLUDE_DIRECTORIES( ${tgt_node6} PUBLIC ${NODE6_INCLUDE})
TARGET_INCLUDE_DIRECTORIES( ${tgt_node6} PUBLIC ${CMAKE_SOURCE_DIR}/Interfaces/dbcapi)
TARGET_INCLUDE_DIRECTORIES( ${tgt_node6} PUBLIC h)

IF(WINDOWS)
    ADD_EXTERNAL_LIBRARY( node6_implib
        LIBS "${node6implib_file}"
        PATHS "${node6implib_path}"
        DONT_COPY_TO_GEN_DIR
    )
    TARGET_LINK_LIBRARIES(${tgt_node6}
        PUBLIC
        node6_implib
    )
ENDIF()
IF(LINUX)
    SET_PROPERTY(TARGET ${tgt_node6} APPEND PROPERTY LINK_FLAGS "-Wl,-Bsymbolic")
ENDIF()
SET_TARGET_PROPERTIES(${tgt_node6} PROPERTIES SUFFIX ".node")

# --------------------------------- End Node 6 ---------------------------------


# ----------------------------------- Node 8 -----------------------------------
SET(tgt_node8 "hana-client_v8")
ADD_HDB_LIBRARY(${tgt_node8}
                SHARED
                NO_LIB_PREFIX
                ALLOW_UNDEFINED_SYMBOLS_AT_LINK_TIME
                ${hananode_sources})

TARGET_COMPILE_DEFINITIONS(${tgt_node8} PRIVATE
    "_DBCAPI_VERSION=2"
    "DRIVER_NAME=hana"
    "node_engine=v8"
)

# MESSAGE(STATUS "NODE8_INCLUDE=${NODE8_INCLUDE}")
TARGET_INCLUDE_DIRECTORIES( ${tgt_node8} PUBLIC ${NODE8_INCLUDE})
TARGET_INCLUDE_DIRECTORIES( ${tgt_node8} PUBLIC ${CMAKE_SOURCE_DIR}/Interfaces/dbcapi)
TARGET_INCLUDE_DIRECTORIES( ${tgt_node8} PUBLIC "h")

IF(WINDOWS)
    ADD_EXTERNAL_LIBRARY( node8_implib
        LIBS "${node8implib_file}"
        PATHS "${node8implib_path}"
        DONT_COPY_TO_GEN_DIR
    )
    TARGET_LINK_LIBRARIES(${tgt_node8}
        PUBLIC
        node8_implib
    )
ENDIF()
IF(LINUX)
    SET_PROPERTY(TARGET ${tgt_node8} APPEND PROPERTY LINK_FLAGS "-Wl,-Bsymbolic")
ENDIF()
SET_TARGET_PROPERTIES(${tgt_node8} PROPERTIES SUFFIX ".node")

# --------------------------------- End Node 8 ---------------------------------

# ----------------------------------- Node 10 -----------------------------------
SET(tgt_node10 "hana-client_v10")
ADD_HDB_LIBRARY(${tgt_node10}
                SHARED
                NO_LIB_PREFIX
                ALLOW_UNDEFINED_SYMBOLS_AT_LINK_TIME
                ${hananode_sources})

TARGET_COMPILE_DEFINITIONS(${tgt_node10} PRIVATE
    "_DBCAPI_VERSION=2"
    "DRIVER_NAME=hana"
    "node_engine=v8"
)

TARGET_INCLUDE_DIRECTORIES( ${tgt_node10} PUBLIC ${NODE10_INCLUDE})
TARGET_INCLUDE_DIRECTORIES( ${tgt_node10} PUBLIC ${CMAKE_SOURCE_DIR}/Interfaces/dbcapi)
TARGET_INCLUDE_DIRECTORIES( ${tgt_node10} PUBLIC "h")

IF(WINDOWS)
    ADD_EXTERNAL_LIBRARY( node10_implib
        LIBS "${node10implib_file}"
        PATHS "${node10implib_path}"
        DONT_COPY_TO_GEN_DIR
    )
    TARGET_LINK_LIBRARIES(${tgt_node10}
        PUBLIC
        node10_implib
    )
ENDIF()
IF(LINUX)
    SET_PROPERTY(TARGET ${tgt_node10} APPEND PROPERTY LINK_FLAGS "-Wl,-Bsymbolic")
ENDIF()
SET_TARGET_PROPERTIES(${tgt_node10} PROPERTIES SUFFIX ".node")

# --------------------------------- End Node 10 ---------------------------------


ELSEIF(CLIENT_BUILD_NODE_SHIM)
    SET(shim_files
        ${GEN_DIR}/hana-client.node
        ${GEN_DIR}/hana-client_v4.node
        ${GEN_DIR}/hana-client_v8.node
        ${GEN_DIR}/hana-client_v10.node
    )
    IF(LINUX)
        SET(gcc48_profile ${PLATFORM_NAME}-gcc48-${EXT_LIB_MODE})
        ADD_CUSTOM_COMMAND(OUTPUT ${shim_files}
            COMMAND ${HAPPY_MAKE_EXECUTABLE} init -b ${gcc48_profile}
            COMMAND ${HAPPY_MAKE_EXECUTABLE} b -b ${gcc48_profile} hana-client_v4 hana-client hana-client_v8 hana-client_v10
            COMMAND ${CMAKE_COMMAND} -E copy ${INTERFACES_SRC_PATH}/build/${gcc48_profile}/gen/hana-client.node ${GEN_DIR}/hana-client.node
            COMMAND ${CMAKE_COMMAND} -E copy ${INTERFACES_SRC_PATH}/build/${gcc48_profile}/gen/hana-client_v4.node ${GEN_DIR}/hana-client_v4.node
            COMMAND ${CMAKE_COMMAND} -E copy ${INTERFACES_SRC_PATH}/build/${gcc48_profile}/gen/hana-client_v8.node ${GEN_DIR}/hana-client_v8.node
            COMMAND ${CMAKE_COMMAND} -E copy ${INTERFACES_SRC_PATH}/build/${gcc48_profile}/gen/hana-client_v10.node ${GEN_DIR}/hana-client_v10.node
        )
        ADD_CUSTOM_TARGET(node_gcc48ongcc43 DEPENDS ${shim_files})
        ADD_DEPENDENCIES(installer node_gcc48ongcc43)
        ADD_DEPENDENCIES(installer_ccl node_gcc48ongcc43)
    ELSEIF(WINDOWS)
        SET(msvc2015_profile ${PLATFORM_NAME}-msvc2015-${EXT_LIB_MODE})
        ADD_CUSTOM_COMMAND(OUTPUT ${shim_files}
            COMMAND ${HAPPY_MAKE_EXECUTABLE} init -b ${msvc2015_profile}
            COMMAND ${HAPPY_MAKE_EXECUTABLE} b -b ${msvc2015_profile} hana-client_v4 hana-client hana-client_v8 hana-client_v10
            COMMAND ${CMAKE_COMMAND} -E copy ${INTERFACES_SRC_PATH}/build/${msvc2015_profile}/gen/hana-client.node ${GEN_DIR}/hana-client.node
            COMMAND ${CMAKE_COMMAND} -E copy ${INTERFACES_SRC_PATH}/build/${msvc2015_profile}/gen/hana-client.pdb ${GEN_DIR}/hana-client.pdb
            COMMAND ${CMAKE_COMMAND} -E copy ${INTERFACES_SRC_PATH}/build/${msvc2015_profile}/gen/hana-client_v4.node ${GEN_DIR}/hana-client_v4.node
            COMMAND ${CMAKE_COMMAND} -E copy ${INTERFACES_SRC_PATH}/build/${msvc2015_profile}/gen/hana-client_v4.pdb ${GEN_DIR}/hana-client_v4.pdb
            COMMAND ${CMAKE_COMMAND} -E copy ${INTERFACES_SRC_PATH}/build/${msvc2015_profile}/gen/hana-client_v8.node ${GEN_DIR}/hana-client_v8.node
            COMMAND ${CMAKE_COMMAND} -E copy ${INTERFACES_SRC_PATH}/build/${msvc2015_profile}/gen/hana-client_v8.pdb ${GEN_DIR}/hana-client_v8.pdb
            COMMAND ${CMAKE_COMMAND} -E copy ${INTERFACES_SRC_PATH}/build/${msvc2015_profile}/gen/hana-client_v10.node ${GEN_DIR}/hana-client_v10.node
            COMMAND ${CMAKE_COMMAND} -E copy ${INTERFACES_SRC_PATH}/build/${msvc2015_profile}/gen/hana-client_v10.pdb ${GEN_DIR}/hana-client_v10.pdb
        )
        ADD_CUSTOM_TARGET(node_msvc2015onmsvc2010 DEPENDS ${shim_files})
        ADD_DEPENDENCIES(installer node_msvc2015onmsvc2010)
        ADD_DEPENDENCIES(installer_ccl node_msvc2015onmsvc2010)
    ENDIF()
ENDIF()
